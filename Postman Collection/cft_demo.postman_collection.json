{
	"info": {
		"_postman_id": "6c230833-eeb8-44fd-a49b-2e8bcfa84649",
		"name": "IaC Scan API v2 - Async Microservices Demo CFT",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[1. Authenticate] /login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9e2ce682-ce29-4925-92cc-c2f208f9d90c",
						"exec": [
							"var jsonData = pm.response.json();",
							"pm.test(\"login_successful\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"login_successful\");",
							"});",
							"token = jsonData.token;console.log(\"x-redlock-auth is: \" + token);",
							"pm.environment.set(\"token\", token);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "48ecd7a5-a9a0-4ef3-a3d8-97c7852e7c6d",
						"exec": [
							"console.log(request.name);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"{{username}}\",\"password\":\"{{password}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{server}}.prismacloud.io/login",
					"protocol": "https",
					"host": [
						"{{server}}",
						"prismacloud",
						"io"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "[2. Initiate Scan] /iac/v2/scans",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d20458c0-7b0c-46a9-9c9b-edc5f74744c1",
						"exec": [
							"var jsonData = pm.response.json();",
							"scan_id = jsonData.data.id;console.log(\"Scan ID is:[\"+scan_id+\"]\");",
							"s3_url = jsonData.data.links.url;console.log(\"S3 URL is:[\"+s3_url+\"]\");",
							"pm.globals.set(\"scan_id\", scan_id);",
							"pm.globals.set(\"s3_url\", s3_url);",
							"pm.test(\"Scan ID [\"+scan_id+\"] and S3 URL exists\", function () {",
							"    pm.expect(jsonData.data.id).to.exist;",
							"    pm.expect(jsonData.data.links.url).to.exist;",
							"});",
							"console.log(jsonData)",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "eea72865-65d3-45f4-976d-bb474115cfa9",
						"exec": [
							"console.log(request.name);",
							"var jsonReq = JSON.parse(pm.request.body.raw);",
							"var assetType = jsonReq.data.attributes.assetType;",
							"pm.globals.set(\"assetType\", assetType);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-redlock-auth",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/vnd.api+json",
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"data\": {\n    \"type\": \"async-scan\",\n    \"attributes\": {\n      \"assetName\": \"postman-test\",\n      \"assetType\": \"IaC-API\",\n      \"accessKey\": \"some_key\",\n      \"tags\":\n        {\n          \"name\": \"env\",\n          \"value\": \"prod\",\n          \"source\": \"string\"\n        }\n      ,\n      \"scanAttributes\": {\n        \"buildNumber\": 9963,\n        \"projectName\": \"my-project2\",\n        \"prName\": \"SL-1234\",\n        \"pipelineName\": \"PrismaCloudScan-Lambda\",\n        \"pipelineLambda\": \"AWSCodePipeline-ng\",\n        \"pipelineJobId\": \"3fa85f64-5717-4562-b3fc-2c963f66afa62\",\n        \"pipelineStageName\": \"SourceArtifact2\",\n        \"pipelineActionName\": \"SourceArtifact2\"\n      },\n      \"failureCriteria\": {\n        \"high\": 1,\n        \"medium\": 1,\n        \"low\": 1,\n        \"operator\": \"or\"\n      }\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{server}}.prismacloud.io/iac/v2/scans",
					"protocol": "https",
					"host": [
						"{{server}}",
						"prismacloud",
						"io"
					],
					"path": [
						"iac",
						"v2",
						"scans"
					]
				}
			},
			"response": []
		},
		{
			"name": "[3. Upload File] CFT template file with issues",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "aac1c6ea-cc2e-49a6-8bb1-3b668c9c366c",
						"exec": [
							"var req = request.data;",
							"console.log(\"Uploading file to S3 URL: [\"+req.path+']')",
							"pm.test(\"Uploading file [\"+req.path+\"] successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "edb5edad-af99-44dc-81ba-a3014bcb0fc1",
						"exec": [
							"console.log(request.name);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/octet-stream",
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
					}
				],
				"body": {
					"mode": "file",
					"file": {
						"src": "~/iac-samples/CFT/cft_aws_json_with_issues.json"
					},
					"options": {
						"file": {}
					}
				},
				"url": {
					"raw": "{{s3_url}}",
					"host": [
						"{{s3_url}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[4. Trigger Scan] /iac/v2/scans/{{scan_id}} for CFT template",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f16e4777-ae20-4d40-bb33-3a75e8523c6f",
						"exec": [
							"var jsonReq = JSON.parse(pm.request.body.raw);",
							"var templateType = jsonReq.data.attributes.templateType;",
							"pm.test(\"Triggered [\"+templateType+\"] Scan Successful\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"console.log(\"Triggered Scan for Template Type: [\"+jsonReq.data.attributes.templateType+']')"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "aa370216-cf4c-4a35-a494-a56d04f2c9f1",
						"exec": [
							"console.log(request.name);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "x-redlock-auth",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/vnd.api+json",
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman."
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"data\": {\n    \"id\": \"{{scan_id}}\",\n    \"attributes\": {\n      \"templateType\": \"cft\"\n    }\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{server}}.prismacloud.io/iac/v2/scans/{{scan_id}}",
					"protocol": "https",
					"host": [
						"{{server}}",
						"prismacloud",
						"io"
					],
					"path": [
						"iac",
						"v2",
						"scans",
						"{{scan_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "[5. Check Scan Status] /iac/v2/scans/{{scan_id}}/status",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9428aa6d-bd35-48a6-9afa-3397f5b05cb1",
						"exec": [
							"var jsonData = pm.response.json();",
							"var status = respJson.data.attributes.status",
							"pm.globals.set(\"status\", status);",
							"pm.test(\"Scan's status is [\"+status+\"]\", function () {",
							"    pm.expect(jsonData.data.attributes.status).oneOf([\"passed\",\"failed\"]);",
							"});",
							"console.log(jsonData)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "6edbabd0-09f9-4777-9f66-9623ea404af4",
						"exec": [
							"console.log(request.name);",
							"var retryDelay = 1000;",
							"var retryLimit = 5;",
							"var url = request['url'].replace('{{server}}', pm.environment.get('server')).replace('{{scan_id}}', pm.globals.get('scan_id'));",
							"console.log(\"URL is: \"+url)",
							"",
							"const getRequest = {",
							"  url: url,",
							"  method: 'GET',",
							"  header: {",
							"    'Content-Type': 'application/json',",
							"    'x-redlock-auth': pm.environment.get('token')",
							"  }",
							"};",
							"",
							"function isProcessingComplete(retryCount) {",
							"    pm.sendRequest(getRequest, function (err, response) {",
							"        if(err) {",
							"            console.log(\"ERR: \"+err);",
							"        } else {",
							"            respJson = response.json()",
							"            if(respJson.errors != null) {",
							"                console.log(\"Scan Status errored: \"+respJson.errors);",
							"            } else if(respJson.errors != null || respJson.data.attributes.status == 'processing') {",
							"               console.log(respJson);",
							"               if (retryCount < retryLimit) {",
							"                    console.log('IaC Scan Job is still processing. Retrying in ' + retryDelay + 'ms');",
							"                    setTimeout(function() {",
							"                        isProcessingComplete(++retryCount);",
							"                    }, retryDelay);",
							"                } else {",
							"                    console.log('Retry limit reached, giving up.');",
							"                    postman.setNextRequest(null);",
							"                }",
							"            } else {",
							"                console.log('Scan Status is: ['+respJson.data.attributes.status+']');",
							"            }",
							"        }",
							"    });",
							"}",
							"",
							"isProcessingComplete(1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-redlock-auth",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/vnd.api+json"
					}
				],
				"url": {
					"raw": "https://{{server}}.prismacloud.io/iac/v2/scans/{{scan_id}}/status",
					"protocol": "https",
					"host": [
						"{{server}}",
						"prismacloud",
						"io"
					],
					"path": [
						"iac",
						"v2",
						"scans",
						"{{scan_id}}",
						"status"
					],
					"query": [
						{
							"key": "scanId",
							"value": "{{scan_id}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[6. Get Scan Result] /iac/v2/scans/{{scan_id}}/results",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "85633370-d7a7-4505-90ae-7e36fe441083",
						"exec": [
							"var jsonData = pm.response.json();",
							"var statusEnv=pm.globals.get(\"status\")",
							"",
							"policyMap = new Map()",
							"policyArr = jsonData.data",
							"resultArr = []",
							"for(var i=0; i< policyArr.length; i++) {",
							"    policyMap.set(policyArr[i].id, policyArr[i].attributes)",
							"    resultArr.push(policyArr[i].attributes.name)",
							"}",
							"pm.test(\"Scan Result's 'matchedPoliciesSummary' is [\"+JSON.stringify(jsonData.meta.matchedPoliciesSummary)+\"]\", function () {",
							"    pm.expect(jsonData.meta.matchedPoliciesSummary).exist;",
							"});",
							"pm.test(\"Scan Result's is [\"+statusEnv+\"] due to [\"+policyMap.size+\"] Matched Policies\", function () {",
							"    pm.expect(jsonData.meta.matchedPoliciesSummary).exist;",
							"    if (statusEnv == \"failed\") {",
							"        pm.expect(policyMap.size).gt(0);",
							"        console.log(policyMap)",
							"    } else {",
							"        pm.expect(policyMap.size).eq(0);",
							"        console.log(\"else\")",
							"    }",
							"});",
							"",
							"for(var i=0; i< resultArr.length; i++) {",
							"    console.log(resultArr[i])",
							"    pm.test(\"Matched Policy #\"+(i+1)+\": [\"+resultArr[i]+\"]\", function () {",
							"        pm.expect(resultArr[i]).exist;",
							"    });",
							"}",
							"",
							"console.log(\"matchedPoliciesSummary:\")",
							"console.log(jsonData.meta.matchedPoliciesSummary)",
							"console.log(jsonData)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "c19a29a5-37ce-44cd-86fe-d8cc7a28b05e",
						"exec": [
							"console.log(request.name);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-redlock-auth",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/vnd.api+json"
					}
				],
				"url": {
					"raw": "https://{{server}}.prismacloud.io/iac/v2/scans/{{scan_id}}/results",
					"protocol": "https",
					"host": [
						"{{server}}",
						"prismacloud",
						"io"
					],
					"path": [
						"iac",
						"v2",
						"scans",
						"{{scan_id}}",
						"results"
					],
					"query": [
						{
							"key": "scanId",
							"value": "{{scan_id}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[7. Get Scan Details] iac/v2/scans/{{scan_id}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4db9ccb4-c795-4403-bb64-25d97fd93c3b",
						"exec": [
							"var jsonData = pm.response.json();",
							"var assetTypeEnv = pm.globals.get(\"assetType\")",
							"pm.test(\"Scan Metadata 'failureCriteria' is [\"+JSON.stringify(jsonData.data.attributes.failureCriteria)+\"]\", function () {",
							"    pm.expect(jsonData.data.attributes.failureCriteria).exist;",
							"});",
							"pm.test(\"Scan Metadata 'asset type' matches: [\"+assetTypeEnv+\"]\", function () {",
							"    pm.expect(jsonData.data.attributes.type).contains(assetTypeEnv);",
							"});",
							"pm.test(\"Scan Metadata 'tags' is [\"+JSON.stringify(jsonData.data.attributes.tags)+\"]\", function () {",
							"    pm.expect(jsonData.data.attributes.tags).exist;",
							"});",
							"console.log(\"assetType: \"+jsonData.data.attributes.type)",
							"console.log(\"failureCriteria: \"+jsonData.data.attributes.failureCriteria)",
							"console.log(\"tags: \"+JSON.stringify(jsonData.data.attributes.tags))",
							"console.log(jsonData)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "2dcd6d4e-6ca3-4485-9c93-eb2fb598a397",
						"exec": [
							"console.log(request.name);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "x-redlock-auth",
						"type": "text",
						"value": "{{token}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/vnd.api+json"
					}
				],
				"url": {
					"raw": "https://{{server}}.prismacloud.io/iac/v2/scans/{{scan_id}}",
					"protocol": "https",
					"host": [
						"{{server}}",
						"prismacloud",
						"io"
					],
					"path": [
						"iac",
						"v2",
						"scans",
						"{{scan_id}}"
					],
					"query": [
						{
							"key": "scanId",
							"value": "{{scan_id}}",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}